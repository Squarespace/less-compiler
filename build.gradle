
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'com.github.townsfolk:gradle-release:1.2'
    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
  }
}

plugins {
  id 'com.glonk.eclipse-checkstyle' version '0.0.4'
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.7'
}

// Sign release archives
ext.isRelease = !version.endsWith('SNAPSHOT')
ext.isUpload = false
gradle.taskGraph.whenReady { taskGraph ->
  ext.isUpload = gradle.taskGraph.hasTask(':uploadArchives') || gradle.taskGraph.hasTask(':uploadInternal')
  if (isRelease && isUpload && gradle.taskGraph.allTasks.any { it instanceof Sign }) { 
    def password = System.console().readPassword('\n\n\n===>  Signing key password: ')
    allprojects { ext.'signing.password' = password }
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

def configurePom(def pom) {
  pom.project {
    name 'less-compiler'
    description 'LESS compiler in Java based on less.js'
    url 'https://github.com/squarespace/less-compiler'

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    scm {
      connection 'scm:git:git@github.com:squarespace/less-compiler.git'
      url 'scm:git:git@github.com:squarespace/less-compiler.git'
      developerConnection 'scm:git:git@github.com:squarespace/less-compiler.git'
    }

    issueManagement {
      system 'github'
      url 'https://github.com/squarespace/less-compiler/issues'
    }

    developers {
      developer {
        id 'pathensley'
        name 'Patrick Hensley'
        email 'pathensley@gmail.com'
      }
    }

  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'application'
  apply plugin: 'license'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: 'maven'
  apply plugin: 'release'
  apply plugin: 'com.github.kt3k.coveralls'

  group 'com.squarespace.less'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  project.ext {
    BUILD_DATE = new java.util.Date()
    BUILD_COMMIT = ('git rev-parse HEAD').execute().text.trim()
  }

  license {
    header rootProject.file('conf/apache-2.0-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    include '**/*.java'
  }

  release {
    requireBranch = '1.x'
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'net.sourceforge.argparse4j:argparse4j:0.4.4'
    compile 'com.eclipsesource.minimal-json:minimal-json:0.9.5'

    testCompile 'org.testng:testng:6.8.7'
    testCompile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
  }

  checkstyle {
    toolVersion = '5.7'
    ignoreFailures = false
    configFile = rootProject.file('checkstyle.xml')
  }

  eclipseCheckstyle {
    syncFormatter = true
    exclude = ['derived']
  }

  test {
    useTestNG()
    finalizedBy jacocoTestReport
  }

  jacoco {
    toolVersion '0.7.1.201405082137'
  }

  jacocoTestReport {
    group = 'Reporting'
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
      html.enabled = true
      xml.enabled = true
      html.destination = "${buildDir}/jacoco-report"
    }
  }

  eclipse.project {
    natures 'net.sf.eclipsecs.core.CheckstyleNature'
    buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
  }

  signing {
    required { isRelease && isUpload }
    sign configurations.archives
  }

  task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  processResources {
    from (sourceSets.main.resources.srcDirs) {
      include '**/build.properties'
      filter(ReplaceTokens, tokens: [
        'build.version': project.version,
        'build.date': BUILD_DATE.toString(),
        'build.commit': BUILD_COMMIT
      ])
    }

    from (sourceSets.main.resources.srcDirs) {
      exclude '**/build.properties'
    }
  }

  // Ensure this always runs, to generate fresh build.properties
  processResources.outputs.upToDateWhen{ false }

  task execJar(type: Jar, dependsOn: classes) {
    classifier = 'exec'
    manifest {
      attributes 'Main-Class': 'com.squarespace.less.cli.LessC'
    }
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {
      configurations.runtime.collect {
        it.isDirectory() ? it : zipTree(it)
      }
    }
  }

  artifacts {
    archives sourcesJar
    archives testJar
    archives javadocJar
    archives execJar
  }

  mainClassName = 'com.squarespace.less.cli.LessC'

  jar {
    manifest {
      attributes 'Main-Class': "${mainClassName}"
    }

  }

  task makeCli(type: Exec, dependsOn: execJar,
    description: 'Create executable "lessc" command') {

    def inputScript = "src/main/resources/scripts/lessc.in"
    def inputArchive = execJar.archivePath
    workingDir '.'
    executable 'bash'
    args '-c', "cat ${inputScript} ${inputArchive} >lessc; chmod ug+x lessc"
  }

  uploadArchives {
    repositories.mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }

      if (project.hasProperty('OSS_USERNAME') && project.hasProperty('OSS_PASSWORD')) {
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
        }

      } else {
        logger.error('Missing OSS_USERNAME, OSS_PASSWORD properties.')
      }

      configurePom(pom)
    }
  }

  uploadArchives.dependsOn ':build'

  // TODO: remove once maven central hosting is setup
  if (project.hasProperty('NEXUS_INTERNAL_RELEASE_URL')) {
    task uploadInternal(type: Upload, dependsOn: build) {
      description = 'Uploads archives to internal Nexus'
      configuration = configurations.archives

      repositories.mavenDeployer {
        repository(url: NEXUS_INTERNAL_RELEASE_URL)
        snapshotRepository(url: NEXUS_INTERNAL_SNAPSHOT_URL)
        configurePom(pom)
      }
    }
  }
}

