import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'me.champeau.gradle.jmh' version '0.5.3'
  id 'net.researchgate.release' version '2.8.1'
  id 'com.moowork.node' version '1.3.1'
  id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }

}

wrapper {
  gradleVersion = '6.8.2'
}

project.ext {
  buildDate = new java.util.Date()
  buildCommit = ('git rev-parse HEAD').execute().text.trim()

  isRelease = !version.endsWith('SNAPSHOT')
  isUpload = false
  isSign = false
}

// Disable Javadoc linting under Java 8+
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

group = 'com.squarespace.less'

apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 8
targetCompatibility = 8

dependencies {
    compile 'org.apache.commons:commons-lang3:3.12.0'
    compile 'net.sourceforge.argparse4j:argparse4j:0.9.0'
    compile 'com.eclipsesource.minimal-json:minimal-json:0.9.5'

    testCompile 'org.testng:testng:7.4.0'
    testCompile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
}

jmh {
  jmhVersion '1.23'
  forceGC = true
  includeTests = false
  zip64 = true
  include = ['.*CssSet.*']
}

plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}

release {
  git {
    requireBranch = ''
  }
}

test {
  useTestNG()
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

java {
  withSourcesJar()
  withJavadocJar()
}

task testJar(type: Jar, group: 'Build', dependsOn: 'javadoc') {
  classifier 'tests'
  from sourceSets.test.output
}

assemble.dependsOn testJar
testJar.dependsOn compileTestJava

configurations {
  tests
}

task execJar(type: Jar, dependsOn: classes) {
  classifier = 'exec'
  manifest {
    attributes 'Main-Class': 'com.squarespace.less.cli.LessC'
  }
  from files(sourceSets.main.output.classesDirs)
  from files(sourceSets.main.output.resourcesDir)
  from {
    configurations.runtime.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives execJar
  archives testJar
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco-report")
    }
}

processResources {
  from (sourceSets.main.resources.srcDirs) {
    include '**/build.properties'
    filter(ReplaceTokens, tokens: [
      'build.version': project.version,
      'build.date': buildDate.toString(),
      'build.commit': buildCommit
    ])
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude '**/build.properties'
  }
}

// Ensure this always runs, to generate fresh build.properties
processResources.outputs.upToDateWhen { false }

publishing {
  publications {
    mavenJava(MavenPublication) {
        artifactId = project.getName()
        from components.java
        artifact testJar
        versionMapping {
            usage('java-api') {
                fromResolutionOf('runtimeClasspath')
            }
            usage('java-runtime') {
                fromResolutionResult()
            }
        }
        pom {
            name = project.getName()
            description = 'Squarespace LESS compiler'
            url = 'https://github.com/squarespace/less-compiler'
            licenses {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    id = 'pathensley'
                    name = 'Patrick Hensley'
                    email = 'pathensley@gmail.com'
                }
            }
            scm {
                connection = 'scm:git:git@github.com:Squarespace/less-compiler.git'
                developerConnection = 'scm:git:git@github.com:Squarespace/less-compiler.git'
                url = 'https://github.com/squarespace/less-compiler'
            }
        }
    }
}
repositories {
    maven {
      def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
      def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
      def _username = project.ext.properties.OSS_USERNAME
      def _password = project.ext.properties.OSS_PASSWORD

      if (project.hasProperty('publish-internal')) {
        releasesRepoUrl = NEXUS_INTERNAL_RELEASE_URL
        snapshotsRepoUrl = NEXUS_INTERNAL_SNAPSHOT_URL
        _username = NEXUS_USERNAME
        _password = System.getenv('NEXUS_PASSWORD')
      }

      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = _username
        password = _password
      }
    }
  }
}

tasks.withType(Sign) {
  onlyIf { isRelease }
}

signing {
  sign publishing.publications.mavenJava
  useGpgCmd()
}

task makeCli(type: Exec, dependsOn: execJar,
  description: 'Create executable "lessc" command') {

    def inputScript = "src/main/resources/scripts/lessc.in"
    def inputArchive = execJar.archivePath
    workingDir '.'
    executable 'bash'
    args '-c', "cat ${inputScript} ${inputArchive} >lessc; chmod ug+x lessc"
}

